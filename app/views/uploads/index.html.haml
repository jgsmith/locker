- content_for :sidebar do
  .module#facets
    .hd Facets
    .bd#facets-form
    .ft

- content_for :user_options do
  .file-options
    = link_to_function "Upload File", 'upload_file_window()'

#files
  #file-tools
  #file-list

%div{:style => 'clear: both;'}

:javascript
  var upload_file_window = function() {
    var upload_form = new Locker.ux.FileUploadWindow({
      title: 'Upload File',
      renderTo: document.body,
      url: #{(uploads_path + '?format=ext_json_html').to_json},
      url_base: #{root_path.to_json},
      store: Locker.store.files,
      groups: Locker.store.groups,
      form_authenticity_token: #{form_authenticity_token.to_json}
    });
    upload_form.setPosition(50,50);
    upload_form.show();
  };

  Ext.onReady(function(){
    var current_filters;
    var update_file_store_filter;

    Ext.namespace('Locker.store');

    Locker.store.groups = new Ext.data.JsonStore({
      url: #{(groups_path + '?format=ext_json').to_json},
      id: 'GroupStore',
      autoLoad: true,
      root: 'items',
      idProperty: 'id',
      fields: ['id', 'name', 'members_can_contribute' ]
    });

    Locker.store.files = new Ext.data.JsonStore({
      url: #{(uploads_path + '?format=ext_json').to_json},
      id: 'FileStore',
      root: 'items',
      autoLoad: true,
      idProperty: 'id',
      fields: ['id', 'name', 'url', 'size', 'created_at', 'description', 'tag', 'group', 'uploaded_by', 'filename' ],
      listeners: {
        datachanged: function(store) {
          var tags = new Hash;
          var groups = new Hash;

          var tags_checked = new Hash;
          var groups_checked = new Hash;

          if(current_filters) {
            if(current_filters.tags) {
              current_filters.tags.each(function(item) {
                tags.set(item,0);
                tags_checked.set(item,1);
              });
            }
            if(current_filters.groups) {
              current_filters.groups.each(function(item) {
                groups.set(item,0);
                groups_checked.set(item,1);
              });
            }
          }

          store.each(function(rec) {
            var t = rec.get('tag');
            var g = rec.get('group');
            if(t) {
              t.each(function(item) {
                if(tags.get(item)) {
                  tags.set(item, tags.get(item)+1);
                }
                else {
                  tags.set(item, 1);
                }
              });
            }
            if(g) {
              g.each(function(item) {
                if(groups.get(item)) {
                  groups.set(item, groups.get(item)+1);
                }
                else {
                  groups.set(item, 1);
                }
              });
            }
          });

          var tag_fields = Ext.ComponentMgr.get('filter-tags');
          var group_fields = Ext.ComponentMgr.get('filter-groups');

          tag_fields.removeAll(true);
          var tag_threshold = 0;
          if(tags.keys().size() > 10) {
              var avg = 0;
              tags.each(function(k) { avg = avg + k[1]; });
              avg = avg / tags.keys().size();
          }

          tags.keys().sort().each(function(k) {
            tag_fields.add({
              xtype: 'checkbox',
              boxLabel: k + ' (' + tags.get(k) + ')',
              name: 'tags',
              inputValue: k,
              hideLabel: true,
              checked: tags_checked.get(k) == 1,
              listeners: {
                check: function(field) {
                  update_file_store_filter(field.findParentByType('form').form);
                }
              }
            });
          });
          group_fields.removeAll(true);
          groups.keys().sort().each(function(k) {
            group_fields.add({
              xtype: 'checkbox',
              boxLabel: k + ' (' + groups.get(k) + ')',
              hideLabel: true,
              name: 'groups',
              inputValue: k,
              checked: groups_checked.get(k) == 1,
              listeners: {
                check: function(field) {
                  update_file_store_filter(field.findParentByType('form').form);
                }
              }
            });
          });

          tag_fields.doLayout();
          group_fields.doLayout();

          return true;
        }
      }
    });

    var file_view_tmpl = new Ext.XTemplate(
      "<dl class='file-info'>",
      "<dt>Filename</dt><dd><a href='{url}'>{filename}</a></dd>",
      "<dt>Uploaded by</dt><dd>{uploaded_by}</dd>",
      "<dt>Groups</dt><dd>{group}</dd>",
      "<dt>Tags</dt><dd>{tag}</dd>",
      "<dt>Description</dt><dd>{description}</dd>",
      "</dl>"
    );
    file_view_tmpl.compile();

    var listView = new Ext.ListView({
      store: Locker.store.files,
      renderTo: 'file-list',
      multiSelect: false,
      emptyText: 'No files to display',
      reserveScrollOffset: true,
      listeners: {
        click: function(view,index, node, e) {
          var rec = Locker.store.files.getAt(index);
          var file_window = new Ext.Window({
            title: rec.get("name"),
            html: file_view_tmpl.apply(rec.data),
            renderTo: document.body,
            width: 350,
            buttons: [{
              text: 'Close',
              handler: function(b,e) {
                this.ownerCt.ownerCt.destroy();
              }
            }],
            buttonAlign: 'center'
          });
          file_window.show();
        }
      },
      columns: [{
        header: '',
        width: 0.05,
        sortable: false,
        tpl: '<a class="silk-page-go icon" href="{url}">&nbsp;</a>'
      }, {
        header: 'File',
        width: 0.5,
        dataIndex: 'name',
        tpl: '{name}'
      }, {
        header: 'Date',
        width: 0.35,
        dataIndex: 'created_at',
        tpl: '{created_at:date("y-m-d h:i a")}'
      }, {
        header: 'Size',
        dataIndex: 'size',
        tpl: '{size:fileSize}',
        align: 'right'
      }]
    });

    update_file_store_filter = function(form) {
      var filters = form.getValues();
      if(filters.tags) {
        filters.tags = $A([ filters.tags ]).flatten();
      }
      else {
        filters.tags = $A([]);
      }
      if(filters.groups) {
        filters.groups = $A([ filters.groups ]).flatten();
      }
      else {
        filters.groups = $A([]);
      }
      filters['text'] = filters['text'] || '';
      current_filters = filters;

      Locker.store.files.clearFilter(true);
      Locker.store.files.filterBy(function(rec,id) {
        if(filters.text != '') {
          regex = new RegExp(filters.text, "gim");
          if(!rec.get('name').match(regex) && !rec.get('description').match(regex)) {
            return false;
          }
        }

        var keep_record = false;

        var t = new Hash; var g = new Hash;

        // on to other things, like tags and groups
        rec.get('tag').each(function(item) {
          t.set(item, 1);
        });

        rec.get('group').each(function(item) {
          g.set(item, 1);
        });

        var found_tag = false;
        filters.tags.each(function(item) {
          if(t.get(item)) {
            found_tag = true;
          }
        });

        var found_group = false;
        filters.groups.each(function(item) {
          if(g.get(item)) {
            found_group = true;
          }
        });

        if(filters.tags.size() > 0 && !found_tag || filters.groups.size() > 0 && !found_group) {
          return false;
        }

        return true;
      });
    };

    new Ext.FormPanel({
      renderTo: 'facets-form',
      items: [{
        xtype: 'textfield',
        name: 'text',
        fieldLabel: 'Search Text',
        hideLabel: true,
        listeners: {
          valid: function(field) {
            update_file_store_filter(field.findParentByType('form').form);
          }
        }
      }, {
        xtype: 'fieldset',
        title: 'Tags',
        id: 'filter-tags',
        height: 250,
        autoScroll: true,
        items: []
      }, {
        xtype: 'fieldset',
        title: 'Groups',
        id: 'filter-groups',
        height: 250,
        autoScroll: true,
        items: []
      }]
    });
  });
